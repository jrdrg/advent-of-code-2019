// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Readline = require("readline");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnknownInstruction = Caml_exceptions.create("Day9-AdventOfCode2019.UnknownInstruction");

var InvalidMode = Caml_exceptions.create("Day9-AdventOfCode2019.InvalidMode");

var input = $$Array.map(Caml_format.caml_int_of_string, "104,1125899906842624,99".split(","));

var createInterface = (
        function (rl) {
            return new Promise((res) => {
                var int = rl.createInterface({
                    input: process.stdin,
                    output: process.stdout,
                    terminal: false
                });
                int.on('line', function (i) {
                    int.close();
                    res(i);
                });
            });
        }
    );

var ReadLine = {
  createInterface: createInterface
};

var rl = Readline;

function getOpcode(num) {
  var op = num % 100;
  var mode1 = (num / 100 | 0) % 10;
  var mode2 = (num / 1000 | 0) % 10;
  var mode3 = (num / 10000 | 0) % 10;
  console.log(Curry._5(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "  OP ",
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            " m1 ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " m2 ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            " m3 ",
                                            /* Int */Block.__(4, [
                                                /* Int_d */0,
                                                /* No_padding */0,
                                                /* No_precision */0,
                                                /* String_literal */Block.__(11, [
                                                    " (",
                                                    /* Int */Block.__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* ")" */41,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "  OP %d m1 %d m2 %d m3 %d (%d)"
              ]), op, mode1, mode2, mode3, num));
  return /* tuple */[
          op,
          mode1,
          mode2,
          mode3
        ];
}

function writeValue(state, addr, value) {
  if (addr >= state[/* input */2].length) {
    console.log("OUTOFBOUNDS");
    Belt_MapInt.set(state[/* extraMemory */3], addr, value);
    return /* () */0;
  } else {
    return Caml_array.caml_array_set(state[/* input */2], addr, value);
  }
}

function readValue(state, addr) {
  if (addr >= state[/* input */2].length) {
    console.log("OUTOFBOUNDS");
    return Belt_Option.getWithDefault(Belt_MapInt.get(state[/* extraMemory */3], addr), 0);
  } else {
    return Caml_array.caml_array_get(state[/* input */2], addr);
  }
}

function getValue(state, addrOrValue, mode) {
  var relativeBase = state[/* relativeBase */1];
  switch (mode) {
    case 0 :
        console.log("   Address", addrOrValue, readValue(state, addrOrValue));
        return readValue(state, addrOrValue);
    case 1 :
        console.log("   Immediate mode", addrOrValue);
        return addrOrValue;
    case 2 :
        var addr = addrOrValue + relativeBase | 0;
        console.log("   Relative mode", addrOrValue, relativeBase, addr);
        return readValue(state, addr);
    default:
      throw [
            InvalidMode,
            mode
          ];
  }
}

function exec(state) {
  while(true) {
    var input = state[/* input */2];
    var pc = state[/* pc */0];
    var match = getOpcode(Caml_array.caml_array_get(input, pc));
    var mode2 = match[2];
    var mode1 = match[1];
    var opcode = match[0];
    if (opcode >= 10) {
      if (opcode === 99) {
        return Promise.resolve(state);
      }
      
    } else if (opcode > 0) {
      switch (opcode - 1 | 0) {
        case 0 :
            var inp1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var output = Caml_array.caml_array_get(input, pc + 3 | 0);
            var result = getValue(state, inp1, mode1) + getValue(state, inp2, mode2) | 0;
            writeValue(state, output, result);
            console.log(Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "   :: Storing ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      " at address ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "   :: Storing %d at address %d"
                        ]), result, output));
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 1 :
            var inp1$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2$1 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var output$1 = Caml_array.caml_array_get(input, pc + 3 | 0);
            var result$1 = Caml_int32.imul(getValue(state, inp1$1, mode1), getValue(state, inp2$1, mode2));
            writeValue(state, output$1, result$1);
            console.log(Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "   :: Storing ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      " at address ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "   :: Storing %d at address %d"
                        ]), result$1, output$1));
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 2 :
            console.log("Input: ");
            var addr = Caml_array.caml_array_get(input, pc + 1 | 0);
            return Curry._1(createInterface, rl).then((function(addr){
                      return function (num) {
                        writeValue(state, addr, Caml_format.caml_int_of_string(num));
                        state[/* pc */0] = state[/* pc */0] + 2 | 0;
                        return exec(state);
                      }
                      }(addr)));
        case 3 :
            var addr$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var output$2 = getValue(state, addr$1, mode1);
            console.log("Out: ", output$2);
            state[/* pc */0] = state[/* pc */0] + 2 | 0;
            continue ;
        case 4 :
            var condition = Caml_array.caml_array_get(input, pc + 1 | 0);
            var addr$2 = Caml_array.caml_array_get(input, pc + 2 | 0);
            if (getValue(state, condition, mode1) !== 0) {
              state[/* pc */0] = getValue(state, addr$2, mode2);
            } else {
              state[/* pc */0] = state[/* pc */0] + 3 | 0;
            }
            continue ;
        case 5 :
            var condition$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var addr$3 = Caml_array.caml_array_get(input, pc + 2 | 0);
            if (getValue(state, condition$1, mode1) === 0) {
              state[/* pc */0] = getValue(state, addr$3, mode2);
            } else {
              state[/* pc */0] = state[/* pc */0] + 3 | 0;
            }
            continue ;
        case 6 :
            var inp1$2 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2$2 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var addr$4 = Caml_array.caml_array_get(input, pc + 3 | 0);
            if (getValue(state, inp1$2, mode1) < getValue(state, inp2$2, mode2)) {
              writeValue(state, addr$4, 1);
            } else {
              writeValue(state, addr$4, 0);
            }
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 7 :
            var inp1$3 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2$3 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var addr$5 = Caml_array.caml_array_get(input, pc + 3 | 0);
            if (getValue(state, inp1$3, mode1) === getValue(state, inp2$3, mode2)) {
              writeValue(state, addr$5, 1);
            } else {
              writeValue(state, addr$5, 0);
            }
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 8 :
            var relativeBase = Caml_array.caml_array_get(input, pc + 1 | 0);
            state[/* relativeBase */1] = state[/* relativeBase */1] + relativeBase | 0;
            console.log("Updating relative base to ", state[/* relativeBase */1]);
            state[/* pc */0] = state[/* pc */0] + 2 | 0;
            continue ;
        
      }
    }
    throw [
          UnknownInstruction,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "invalid instruction ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "invalid instruction %d"
                  ]), opcode)
        ];
  };
}

function make(input) {
  return /* record */[
          /* pc */0,
          /* relativeBase */0,
          /* input */input,
          /* extraMemory */Belt_MapInt.empty
        ];
}

exec(make(input)).then((function (param) {
          console.log("Done");
          return Promise.resolve(/* () */0);
        })).catch((function (err) {
        console.log(err);
        return Promise.resolve(/* () */0);
      }));

var l = /* int64 */[
  /* hi */0,
  /* lo */32
];

exports.UnknownInstruction = UnknownInstruction;
exports.InvalidMode = InvalidMode;
exports.input = input;
exports.l = l;
exports.ReadLine = ReadLine;
exports.rl = rl;
exports.getOpcode = getOpcode;
exports.writeValue = writeValue;
exports.readValue = readValue;
exports.getValue = getValue;
exports.exec = exec;
exports.make = make;
/* input Not a pure module */
