// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnknownInstruction = Caml_exceptions.create("Day2-AdventOfCode2019.UnknownInstruction");

var input = $$Array.map(Caml_format.caml_int_of_string, $$Array.map($$String.trim, "1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,13,1,19,1,19,10,23,2,10,23,27,1,27,6,31,1,13,31,35,1,13,35,39,1,39,10,43,2,43,13,47,1,47,9,51,2,51,13,55,1,5,55,59,2,59,9,63,1,13,63,67,2,13,67,71,1,71,5,75,2,75,13,79,1,79,6,83,1,83,5,87,2,87,6,91,1,5,91,95,1,95,13,99,2,99,6,103,1,5,103,107,1,107,9,111,2,6,111,115,1,5,115,119,1,119,2,123,1,6,123,0,99,2,14,0,0".split(",")));

function exec(state) {
  while(true) {
    var input = state[/* input */1];
    var pc = state[/* pc */0];
    var opcode = Caml_array.caml_array_get(input, pc);
    var switcher = opcode - 1 | 0;
    if (switcher === 0 || switcher === 1) {
      if (switcher !== 0) {
        var inp1 = Caml_array.caml_array_get(input, pc + 1 | 0);
        var inp2 = Caml_array.caml_array_get(input, pc + 2 | 0);
        var output = Caml_array.caml_array_get(input, pc + 3 | 0);
        var result = Caml_int32.imul(Caml_array.caml_array_get(input, inp1), Caml_array.caml_array_get(input, inp2));
        Caml_array.caml_array_set(input, output, result);
        state[/* pc */0] = state[/* pc */0] + 4 | 0;
        continue ;
      } else {
        var inp1$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
        var inp2$1 = Caml_array.caml_array_get(input, pc + 2 | 0);
        var output$1 = Caml_array.caml_array_get(input, pc + 3 | 0);
        var result$1 = Caml_array.caml_array_get(input, inp1$1) + Caml_array.caml_array_get(input, inp2$1) | 0;
        Caml_array.caml_array_set(input, output$1, result$1);
        state[/* pc */0] = state[/* pc */0] + 4 | 0;
        continue ;
      }
    } else {
      if (switcher !== 98) {
        throw [
              UnknownInstruction,
              opcode
            ];
      }
      return state;
    }
  };
}

function changeNounAndVerb(noun, verb) {
  var cloned = $$Array.copy(input);
  Caml_array.caml_array_set(cloned, 1, noun);
  Caml_array.caml_array_set(cloned, 2, verb);
  return cloned;
}

function getOutput(input) {
  return Caml_array.caml_array_get(input, 0);
}

var input$1 = changeNounAndVerb(12, 2);

var result = exec(/* record */[
      /* pc */0,
      /* input */input$1
    ]);

console.log(Curry._1(Printf.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "Part 1: ",
                  /* Int */Block.__(4, [
                      /* Int_d */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* End_of_format */0
                    ])
                ]),
              "Part 1: %d"
            ]), Caml_array.caml_array_get(input$1, 0)));

function puzzleAnswer(noun, verb) {
  return Caml_int32.imul(100, noun) + verb | 0;
}

var params = $$Array.init(10000, (function (idx) {
        return /* tuple */[
                idx / 100 | 0,
                idx % 100
              ];
      }));

function findAnswer(_index) {
  while(true) {
    var index = _index;
    var match = Caml_array.caml_array_get(params, index);
    var verb = match[1];
    var noun = match[0];
    var input = changeNounAndVerb(noun, verb);
    var output = Caml_array.caml_array_get(exec(/* record */[
                /* pc */0,
                /* input */input
              ])[/* input */1], 0);
    if (output === 19690720) {
      return /* Found */[puzzleAnswer(noun, verb)];
    } else {
      _index = index + 1 | 0;
      continue ;
    }
  };
}

console.log("Part 2");

var match = findAnswer(0);

if (match) {
  console.log("Found", match[0]);
} else {
  console.log("Not found");
}

var magicOutput = 19690720;

exports.UnknownInstruction = UnknownInstruction;
exports.exec = exec;
exports.changeNounAndVerb = changeNounAndVerb;
exports.getOutput = getOutput;
exports.input = input$1;
exports.result = result;
exports.magicOutput = magicOutput;
exports.puzzleAnswer = puzzleAnswer;
exports.params = params;
exports.findAnswer = findAnswer;
/* input Not a pure module */
