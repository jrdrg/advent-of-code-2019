// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Readline = require("readline");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnknownInstruction = Caml_exceptions.create("Day5-AdventOfCode2019.UnknownInstruction");

var InvalidMode = Caml_exceptions.create("Day5-AdventOfCode2019.InvalidMode");

var input = $$Array.map(Caml_format.caml_int_of_string, "3,225,1,225,6,6,1100,1,238,225,104,0,1102,67,92,225,1101,14,84,225,1002,217,69,224,101,-5175,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1,214,95,224,101,-127,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,8,41,225,2,17,91,224,1001,224,-518,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,37,27,225,1101,61,11,225,101,44,66,224,101,-85,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,7,32,224,101,-224,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1001,14,82,224,101,-174,224,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,102,65,210,224,101,-5525,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,81,9,224,101,-90,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,71,85,225,1102,61,66,225,1102,75,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,434,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226".split(","));

var createInterface = (
        function (rl) {
            return new Promise((res) => {
                var int = rl.createInterface({
                    input: process.stdin,
                    output: process.stdout,
                    terminal: false
                });
                int.on('line', function (i) {
                    int.close();
                    res(i);
                });
            });
        }
    );

var ReadLine = /* module */[/* createInterface */createInterface];

var rl = Readline;

function getOpcode(num) {
  var op = num % 100;
  var mode1 = (num / 100 | 0) % 10;
  var mode2 = (num / 1000 | 0) % 10;
  var mode3 = (num / 10000 | 0) % 10;
  console.log(Curry._5(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "  OP ",
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            " m1 ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " m2 ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            " m3 ",
                                            /* Int */Block.__(4, [
                                                /* Int_d */0,
                                                /* No_padding */0,
                                                /* No_precision */0,
                                                /* String_literal */Block.__(11, [
                                                    " (",
                                                    /* Int */Block.__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* ")" */41,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "  OP %d m1 %d m2 %d m3 %d (%d)"
              ]), op, mode1, mode2, mode3, num));
  return /* tuple */[
          op,
          mode1,
          mode2,
          mode3
        ];
}

function getValue(input, addrOrValue, mode) {
  if (mode !== 0) {
    if (mode !== 1) {
      throw [
            InvalidMode,
            mode
          ];
    }
    console.log("   Immediate mode", addrOrValue);
    return addrOrValue;
  } else {
    console.log("   Address", addrOrValue, Caml_array.caml_array_get(input, addrOrValue));
    return Caml_array.caml_array_get(input, addrOrValue);
  }
}

function exec(state) {
  while(true) {
    var input = state[/* input */1];
    var pc = state[/* pc */0];
    var match = getOpcode(Caml_array.caml_array_get(input, pc));
    var mode2 = match[2];
    var mode1 = match[1];
    var opcode = match[0];
    var exit = 0;
    if (opcode >= 9) {
      if (opcode !== 99) {
        exit = 1;
      } else {
        return Promise.resolve(state);
      }
    } else if (opcode > 0) {
      switch (opcode - 1 | 0) {
        case 0 : 
            var inp1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var output = Caml_array.caml_array_get(input, pc + 3 | 0);
            var result = getValue(input, inp1, mode1) + getValue(input, inp2, mode2) | 0;
            Caml_array.caml_array_set(input, output, result);
            console.log(Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "   :: Storing ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      " at address ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "   :: Storing %d at address %d"
                        ]), result, output));
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 1 : 
            var inp1$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2$1 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var output$1 = Caml_array.caml_array_get(input, pc + 3 | 0);
            var result$1 = Caml_int32.imul(getValue(input, inp1$1, mode1), getValue(input, inp2$1, mode2));
            Caml_array.caml_array_set(input, output$1, result$1);
            console.log(Curry._2(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "   :: Storing ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      " at address ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ]),
                          "   :: Storing %d at address %d"
                        ]), result$1, output$1));
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 2 : 
            console.log("Input: ");
            var addr = Caml_array.caml_array_get(input, pc + 1 | 0);
            return Curry._1(createInterface, rl).then((function(input,addr){
                      return function (num) {
                        Caml_array.caml_array_set(input, addr, Caml_format.caml_int_of_string(num));
                        state[/* pc */0] = state[/* pc */0] + 2 | 0;
                        return exec(state);
                      }
                      }(input,addr)));
        case 3 : 
            var addr$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var output$2 = getValue(input, addr$1, mode1);
            console.log("Out: ", output$2);
            state[/* pc */0] = state[/* pc */0] + 2 | 0;
            continue ;
        case 4 : 
            var condition = Caml_array.caml_array_get(input, pc + 1 | 0);
            var addr$2 = Caml_array.caml_array_get(input, pc + 2 | 0);
            if (getValue(input, condition, mode1) !== 0) {
              state[/* pc */0] = getValue(input, addr$2, mode2);
            } else {
              state[/* pc */0] = state[/* pc */0] + 3 | 0;
            }
            continue ;
        case 5 : 
            var condition$1 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var addr$3 = Caml_array.caml_array_get(input, pc + 2 | 0);
            if (getValue(input, condition$1, mode1) === 0) {
              state[/* pc */0] = getValue(input, addr$3, mode2);
            } else {
              state[/* pc */0] = state[/* pc */0] + 3 | 0;
            }
            continue ;
        case 6 : 
            var inp1$2 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2$2 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var addr$4 = Caml_array.caml_array_get(input, pc + 3 | 0);
            if (getValue(input, inp1$2, mode1) < getValue(input, inp2$2, mode2)) {
              Caml_array.caml_array_set(input, addr$4, 1);
            } else {
              Caml_array.caml_array_set(input, addr$4, 0);
            }
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        case 7 : 
            var inp1$3 = Caml_array.caml_array_get(input, pc + 1 | 0);
            var inp2$3 = Caml_array.caml_array_get(input, pc + 2 | 0);
            var addr$5 = Caml_array.caml_array_get(input, pc + 3 | 0);
            if (getValue(input, inp1$3, mode1) === getValue(input, inp2$3, mode2)) {
              Caml_array.caml_array_set(input, addr$5, 1);
            } else {
              Caml_array.caml_array_set(input, addr$5, 0);
            }
            state[/* pc */0] = state[/* pc */0] + 4 | 0;
            continue ;
        
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      throw [
            UnknownInstruction,
            Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "invalid instruction ",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "invalid instruction %d"
                    ]), opcode)
          ];
    }
    
  };
}

exec(/* record */[
          /* pc */0,
          /* input */input
        ]).then((function (param) {
          console.log("Done");
          return Promise.resolve(/* () */0);
        })).catch((function (err) {
        console.log(err);
        return Promise.resolve(/* () */0);
      }));

exports.UnknownInstruction = UnknownInstruction;
exports.InvalidMode = InvalidMode;
exports.input = input;
exports.ReadLine = ReadLine;
exports.rl = rl;
exports.getOpcode = getOpcode;
exports.getValue = getValue;
exports.exec = exec;
/* input Not a pure module */
