// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Range = require("bs-platform/lib/js/belt_Range.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var InvalidInput = Caml_exceptions.create("Day12-AdventOfCode2019.InvalidInput");

function toString(moon) {
  var match = moon[/* position */0];
  var position = match[0];
  var match$1 = moon[/* velocity */1];
  var velocity = match$1[0];
  console.log(Curry._6(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "P=<x:",
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            ",y:",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    ",z:",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            ">,V=<x:",
                                            /* Int */Block.__(4, [
                                                /* Int_d */0,
                                                /* No_padding */0,
                                                /* No_precision */0,
                                                /* String_literal */Block.__(11, [
                                                    ",y:",
                                                    /* Int */Block.__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* String_literal */Block.__(11, [
                                                            ",z:",
                                                            /* Int */Block.__(4, [
                                                                /* Int_d */0,
                                                                /* No_padding */0,
                                                                /* No_precision */0,
                                                                /* Char_literal */Block.__(12, [
                                                                    /* ">" */62,
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ]),
                "P=<x:%d,y:%d,z:%d>,V=<x:%d,y:%d,z:%d>"
              ]), position[/* x */0], position[/* y */1], position[/* z */2], velocity[/* x */0], velocity[/* y */1], velocity[/* z */2]));
  return /* () */0;
}

function strToVec(str) {
  var reg = new RegExp("<x=([\\-\\d]+), y=([\\-\\d]+), z=([\\-\\d]+)>");
  var result = reg.exec(str);
  var matches;
  if (result !== null) {
    matches = $$Array.map((function (c) {
            return Js_option.getWithDefault("0", (c == null) ? undefined : Caml_option.some(c));
          }), result);
  } else {
    throw [
          InvalidInput,
          str
        ];
  }
  return /* record */[
          /* x */Caml_format.caml_int_of_string(Caml_array.caml_array_get(matches, 1)),
          /* y */Caml_format.caml_int_of_string(Caml_array.caml_array_get(matches, 2)),
          /* z */Caml_format.caml_int_of_string(Caml_array.caml_array_get(matches, 3))
        ];
}

function prepareInput(str) {
  return $$Array.map($$String.trim, str.split("\n"));
}

function makeMoon(str) {
  var pos = strToVec(str);
  return /* record */[
          /* position : Position */[pos],
          /* velocity : Velocity */[/* record */[
              /* x */0,
              /* y */0,
              /* z */0
            ]]
        ];
}

function initMoons(inputs) {
  return $$Array.map(makeMoon, inputs);
}

var input = prepareInput("<x=-1, y=7, z=3>\n<x=12, y=2, z=-13>\n<x=14, y=18, z=-8>\n<x=17, y=4, z=-4>");

var moons = $$Array.map(makeMoon, input);

function determineGravityAmount(amount1, amount2) {
  if (amount1 === amount2) {
    return 0;
  } else if (amount1 > amount2) {
    return -1;
  } else if (amount1 < amount2) {
    return 1;
  } else {
    throw [
          InvalidInput,
          "determineGravityAmount"
        ];
  }
}

function updateVelocity(param, param$1) {
  var v2 = param$1[0];
  var v1 = param[0];
  return /* Velocity */[/* record */[
            /* x */v1[/* x */0] + v2[/* x */0] | 0,
            /* y */v1[/* y */1] + v2[/* y */1] | 0,
            /* z */v1[/* z */2] + v2[/* z */2] | 0
          ]];
}

function applyGravity(param, param$1) {
  var moon2 = param$1[0];
  var moon1 = param[0];
  return /* Velocity */[/* record */[
            /* x */determineGravityAmount(moon1[/* x */0], moon2[/* x */0]),
            /* y */determineGravityAmount(moon1[/* y */1], moon2[/* y */1]),
            /* z */determineGravityAmount(moon1[/* z */2], moon2[/* z */2])
          ]];
}

function applyVelocity(moon) {
  var match = moon[/* position */0];
  var match$1 = match[0];
  var match$2 = moon[/* velocity */1];
  var match$3 = match$2[0];
  return /* record */[
          /* position : Position */[/* record */[
              /* x */match$1[/* x */0] + match$3[/* x */0] | 0,
              /* y */match$1[/* y */1] + match$3[/* y */1] | 0,
              /* z */match$1[/* z */2] + match$3[/* z */2] | 0
            ]],
          /* velocity */moon[/* velocity */1]
        ];
}

function determinePairs(moons) {
  var moonList = List.mapi((function (index, moon) {
          return /* tuple */[
                  moon,
                  index
                ];
        }), $$Array.to_list(moons));
  return $$Array.of_list(List.concat(List.map((function (param) {
                        var i1 = param[1];
                        var m = param[0];
                        return List.map((function (param) {
                                      return /* tuple */[
                                              m,
                                              param[0]
                                            ];
                                    }), List.filter((function (param) {
                                            return i1 !== param[1];
                                          }))(moonList));
                      }), moonList)));
}

function timeStep(moons) {
  var pairs = determinePairs(moons);
  $$Array.iter((function (param) {
          var moon1 = param[0];
          var m1vel = applyGravity(moon1[/* position */0], param[1][/* position */0]);
          moon1[/* velocity */1] = updateVelocity(m1vel, moon1[/* velocity */1]);
          return /* () */0;
        }), pairs);
  $$Array.iter((function (moon) {
          var m = applyVelocity(moon);
          moon[/* position */0] = m[/* position */0];
          return /* () */0;
        }), moons);
  return moons;
}

function simulate(moons, steps) {
  Belt_Range.forEach(0, steps - 1 | 0, (function (param) {
          timeStep(moons);
          return /* () */0;
        }));
  return moons;
}

function potentialEnergy(param) {
  var match = param[/* position */0];
  var match$1 = match[0];
  return (Pervasives.abs(match$1[/* x */0]) + Pervasives.abs(match$1[/* y */1]) | 0) + Pervasives.abs(match$1[/* z */2]) | 0;
}

function kineticEnergy(param) {
  var match = param[/* velocity */1];
  var match$1 = match[0];
  return (Pervasives.abs(match$1[/* x */0]) + Pervasives.abs(match$1[/* y */1]) | 0) + Pervasives.abs(match$1[/* z */2]) | 0;
}

function totalEnergy(moons) {
  return $$Array.fold_left((function (sum, moon) {
                var total = Caml_int32.imul(potentialEnergy(moon), kineticEnergy(moon));
                return sum + total | 0;
              }), 0, moons);
}

simulate(moons, 1000);

console.log("Part 1: ", totalEnergy(moons));

exports.InvalidInput = InvalidInput;
exports.toString = toString;
exports.strToVec = strToVec;
exports.prepareInput = prepareInput;
exports.makeMoon = makeMoon;
exports.initMoons = initMoons;
exports.input = input;
exports.moons = moons;
exports.determineGravityAmount = determineGravityAmount;
exports.updateVelocity = updateVelocity;
exports.applyGravity = applyGravity;
exports.applyVelocity = applyVelocity;
exports.determinePairs = determinePairs;
exports.timeStep = timeStep;
exports.simulate = simulate;
exports.potentialEnergy = potentialEnergy;
exports.kineticEnergy = kineticEnergy;
exports.totalEnergy = totalEnergy;
/* input Not a pure module */
