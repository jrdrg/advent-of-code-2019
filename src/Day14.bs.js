// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var InvalidLine = Caml_exceptions.create("Day14-AdventOfCode2019.InvalidLine");

var ChemicalAlreadyExists = Caml_exceptions.create("Day14-AdventOfCode2019.ChemicalAlreadyExists");

var CannotFindReactionFor = Caml_exceptions.create("Day14-AdventOfCode2019.CannotFindReactionFor");

function addToMap(param, map) {
  var output = param[/* output */1];
  var created_000 = /* outputQuantity */output[/* quantity */1];
  var created_001 = /* inputs */param[/* inputs */0];
  var created = /* record */[
    created_000,
    created_001,
    /* leftoverOre */0
  ];
  return Belt_MapString.update(map, output[/* name */0], (function (v) {
                if (v !== undefined) {
                  throw ChemicalAlreadyExists;
                }
                return created;
              }));
}

function parseChemical(str) {
  var asArray = $$Array.map($$String.trim, str.split(" "));
  var quantity = Caml_array.caml_array_get(asArray, 0);
  var name = Caml_array.caml_array_get(asArray, 1);
  return /* record */[
          /* name */name,
          /* quantity */Caml_format.caml_int_of_string(quantity)
        ];
}

function parseLine(line) {
  var parts = $$Array.map($$String.trim, line.split("=>"));
  var input = Caml_array.caml_array_get(parts, 0);
  var output = Caml_array.caml_array_get(parts, 1);
  console.log(input, "::", output);
  var inputs = $$Array.to_list($$Array.map(parseChemical, $$Array.map($$String.trim, input.split(","))));
  return /* record */[
          /* inputs */inputs,
          /* output */parseChemical(output)
        ];
}

function makeInput(str) {
  return $$Array.map(parseLine, $$Array.map($$String.trim, str.split("\n")));
}

var input = "180 ORE => 9 DQFL\n3 HGCR, 9 TKRT => 8 ZBLC\n1 MZQLG, 12 RPLCK, 8 PDTP => 8 VCFX\n3 ZBLC, 19 VFZX => 1 SJQL\n1 CRPGK => 4 TPRT\n7 HGCR, 4 TGCW, 1 VFZX => 9 JBPHS\n8 GJHX => 4 NSDBV\n1 VFTG => 2 QNWD\n1 WDKW, 2 DWRH, 6 VNMV, 2 HFHL, 55 GJHX, 4 NSDBV, 15 KLJMS, 17 KZDJ => 1 FUEL\n2 JHSJ, 15 JNWJ, 1 ZMFXQ => 4 GVRK\n1 PJFBD => 3 MZQLG\n1 SJQL, 11 LPVWN => 9 DLZS\n3 PRMJ, 2 XNWV => 6 JHSJ\n4 SJQL => 8 PJFBD\n14 QNWD => 6 STHQ\n5 CNLFV, 2 VFTG => 9 XNWV\n17 LWNKB, 6 KBWF, 3 PLSCB => 8 KZDJ\n6 LHWZQ, 5 LWNKB => 3 ZDWX\n5 RPLCK, 2 LPVWN => 8 ZMFXQ\n1 QNWD, 2 TKRT => 3 CRPGK\n1 JBPHS, 1 XNWV => 6 TLRST\n21 ZDWX, 3 FZDP, 4 CRPGK => 6 PDTP\n1 JCVP => 1 WXDVT\n2 CRPGK => 9 FGVL\n4 DQFL, 2 VNMV => 1 HGCR\n2 GVRK, 2 VCFX, 3 PJFBD, 1 PLSCB, 23 FZDP, 22 PCSM, 1 JLVQ => 6 HFHL\n1 CRPGK, 5 PJFBD, 4 XTCP => 8 PLSCB\n1 HTZW, 17 FGVL => 3 LHWZQ\n2 KBWF => 4 DQKLC\n2 LHWZQ => 2 PRMJ\n2 DLZS, 2 VCFX, 15 PDTP, 14 ZDWX, 35 NBZC, 20 JVMF, 1 BGWMS => 3 DWRH\n2 TKVCX, 6 RPLCK, 2 HTZW => 4 XTCP\n8 CNLFV, 1 NRSD, 1 VFTG => 9 VFZX\n1 TLRST => 4 WDKW\n9 VFCZG => 7 GJHX\n4 FZDP => 8 JLVQ\n2 ZMFXQ, 2 STHQ => 6 QDZB\n2 SJQL, 8 ZDWX, 6 LPRL, 6 WXDVT, 1 TPRT, 1 JNWJ => 8 KLJMS\n6 JBPHS, 2 ZBLC => 6 HTZW\n1 PDTP, 2 LHWZQ => 8 JNWJ\n8 ZBLC => 7 TKVCX\n2 WDKW, 31 QDZB => 4 PCSM\n15 GJHX, 5 TKVCX => 7 FZDP\n15 SJQL, 3 PRMJ => 4 JCVP\n31 CNLFV => 1 TGCW\n1 TLRST, 2 WDKW => 9 KBWF\n102 ORE => 7 VNMV\n103 ORE => 5 CNLFV\n163 ORE => 2 VFTG\n5 NRSD, 1 STHQ => 3 VFCZG\n16 LPVWN, 13 KBWF => 2 BGWMS\n5 BGWMS, 11 SJQL, 9 FZDP => 6 NBZC\n175 ORE => 7 NRSD\n5 HTZW => 4 LPVWN\n4 PRMJ => 7 JVMF\n6 PCSM, 8 DQKLC => 7 LPRL\n2 CNLFV => 7 TKRT\n3 FZDP => 3 LWNKB\n1 HTZW => 4 RPLCK";

var inp = makeInput(input);

var map = $$Array.fold_left((function (m, reaction) {
        return addToMap(reaction, m);
      }), Belt_MapString.empty, inp);

function getReaction(chemical, reactions) {
  return Belt_MapString.get(reactions, chemical[/* name */0]);
}

function getLeftovers(chemical, leftovers) {
  return Belt_MapString.get(leftovers, chemical[/* name */0]);
}

function updateLeftovers(leftovers, name, leftover) {
  return Belt_MapString.update(leftovers, name, (function (c) {
                if (c !== undefined) {
                  return Curry._1(leftover, c);
                } else {
                  return Curry._1(leftover, 0);
                }
              }));
}

function getOreFor($staropt$star, chemical, reactions) {
  var leftovers = $staropt$star !== undefined ? $staropt$star : /* record */[/* contents */Belt_MapString.empty];
  var createdBy = Belt_MapString.get(reactions, chemical[/* name */0]);
  var leftoverAmount = Belt_MapString.get(leftovers[0], chemical[/* name */0]);
  Curry._2(Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "Creating ",
                /* Int */Block.__(4, [
                    /* Int_d */0,
                    /* No_padding */0,
                    /* No_precision */0,
                    /* Char_literal */Block.__(12, [
                        /* " " */32,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ])
              ]),
            "Creating %d %s\n"
          ]), chemical[/* quantity */1], chemical[/* name */0]);
  var match = chemical[/* name */0];
  if (match === "ORE") {
    return chemical[/* quantity */1];
  } else if (createdBy !== undefined) {
    var match$1 = createdBy;
    var inputs = match$1[/* inputs */1];
    var outputQuantity = match$1[/* outputQuantity */0];
    if (leftoverAmount !== undefined) {
      var leftover = leftoverAmount;
      if (leftover >= chemical[/* quantity */1]) {
        Curry._4(Printf.printf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "\nUsing leftovers for ",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              ": ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* String_literal */Block.__(11, [
                                      " >= ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* String_literal */Block.__(11, [
                                              ", requested ",
                                              /* Int */Block.__(4, [
                                                  /* Int_d */0,
                                                  /* No_padding */0,
                                                  /* No_precision */0,
                                                  /* Char_literal */Block.__(12, [
                                                      /* "\n" */10,
                                                      /* End_of_format */0
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "\nUsing leftovers for %s: %d >= %d, requested %d\n"
                ]), match, leftover, outputQuantity, chemical[/* quantity */1]);
        leftovers[0] = updateLeftovers(leftovers[0], match, (function (param) {
                return leftover - chemical[/* quantity */1] | 0;
              }));
        return 0;
      }
      
    }
    console.log("found", inputs, outputQuantity);
    var createdAmount = List.fold_left((function (totalOre, inputChemical) {
            console.log("IC", inputChemical);
            var createdOre = getOreFor(leftovers, inputChemical, reactions);
            console.log(Curry._3(Printf.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "  --- Created ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* " " */32,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              ", ore ",
                                              /* Int */Block.__(4, [
                                                  /* Int_d */0,
                                                  /* No_padding */0,
                                                  /* No_precision */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ]),
                          "  --- Created %d %s, ore %d"
                        ]), inputChemical[/* quantity */1], inputChemical[/* name */0], createdOre));
            return totalOre + createdOre | 0;
          }), 0, inputs);
    console.log(Curry._4(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "Requested ",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* Char_literal */Block.__(12, [
                              /* " " */32,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* String_literal */Block.__(11, [
                                      ", created ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* String_literal */Block.__(11, [
                                              ", out ",
                                              /* Int */Block.__(4, [
                                                  /* Int_d */0,
                                                  /* No_padding */0,
                                                  /* No_precision */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ])
                    ]),
                  "Requested %d %s, created %d, out %d"
                ]), chemical[/* quantity */1], match, createdAmount, outputQuantity));
    if (outputQuantity >= chemical[/* quantity */1]) {
      var leftover$1 = outputQuantity - chemical[/* quantity */1] | 0;
      leftovers[0] = updateLeftovers(leftovers[0], match, (function (l) {
              return l + leftover$1 | 0;
            }));
      return createdAmount;
    } else {
      var remaining = chemical[/* quantity */1] - outputQuantity | 0;
      var chem = /* record */[
        /* name */match,
        /* quantity */remaining
      ];
      console.log(Curry._2(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Not enough ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ", need ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        " more",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "Not enough %s, need %d more"
                  ]), match, remaining));
      return createdAmount + getOreFor(leftovers, chem, reactions) | 0;
    }
  } else {
    throw [
          CannotFindReactionFor,
          chemical[/* name */0]
        ];
  }
}

var Reaction = {
  getReaction: getReaction,
  getLeftovers: getLeftovers,
  updateLeftovers: updateLeftovers,
  getOreFor: getOreFor
};

var ore = getOreFor(undefined, /* record */[
      /* name */"FUEL",
      /* quantity */1
    ], map);

console.log("Part 1: ", ore);

exports.InvalidLine = InvalidLine;
exports.ChemicalAlreadyExists = ChemicalAlreadyExists;
exports.CannotFindReactionFor = CannotFindReactionFor;
exports.addToMap = addToMap;
exports.parseChemical = parseChemical;
exports.parseLine = parseLine;
exports.makeInput = makeInput;
exports.input = input;
exports.inp = inp;
exports.map = map;
exports.Reaction = Reaction;
exports.ore = ore;
/* inp Not a pure module */
